//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 2 images.
  struct image {
    /// Image `settings_active`.
    static let settings_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_active")
    /// Image `settings_inactive`.
    static let settings_inactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_inactive")
    
    /// `UIImage(named: "settings_active", bundle: ..., traitCollection: ...)`
    static func settings_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_active, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_inactive", bundle: ..., traitCollection: ...)`
    static func settings_inactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_inactive, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `meetingRoomListTableViewCell`.
    static let meetingRoomListTableViewCell: Rswift.ReuseIdentifier<MeetingRoomTableViewCell> = Rswift.ReuseIdentifier(identifier: "meetingRoomListTableViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 6 storyboards.
  struct storyboard {
    /// Storyboard `DashboardStoryboard`.
    static let dashboardStoryboard = _R.storyboard.dashboardStoryboard()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Login`.
    static let login = _R.storyboard.login()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `MeetingRoomsListStoryboard`.
    static let meetingRoomsListStoryboard = _R.storyboard.meetingRoomsListStoryboard()
    /// Storyboard `SettingsStoryboard`.
    static let settingsStoryboard = _R.storyboard.settingsStoryboard()
    
    /// `UIStoryboard(name: "DashboardStoryboard", bundle: ...)`
    static func dashboardStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.dashboardStoryboard)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Login", bundle: ...)`
    static func login(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.login)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "MeetingRoomsListStoryboard", bundle: ...)`
    static func meetingRoomsListStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.meetingRoomsListStoryboard)
    }
    
    /// `UIStoryboard(name: "SettingsStoryboard", bundle: ...)`
    static func settingsStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.settingsStoryboard)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try login.validate()
      try settingsStoryboard.validate()
      try meetingRoomsListStoryboard.validate()
      try dashboardStoryboard.validate()
    }
    
    struct dashboardStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let dashboardBase = StoryboardViewControllerResource<DashboardViewController>(identifier: "DashboardBase")
      let name = "DashboardStoryboard"
      
      func dashboardBase(_: Void = ()) -> DashboardViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: dashboardBase)
      }
      
      static func validate() throws {
        if _R.storyboard.dashboardStoryboard().dashboardBase() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'dashboardBase' could not be loaded from storyboard 'DashboardStoryboard' as 'DashboardViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct login: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let loginBase = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginBase")
      let name = "Login"
      
      func loginBase(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginBase)
      }
      
      static func validate() throws {
        if _R.storyboard.login().loginBase() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginBase' could not be loaded from storyboard 'Login' as 'LoginViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = RootViewController
      
      let bundle = R.hostingBundle
      let name = "Main"
      let root = StoryboardViewControllerResource<RootViewController>(identifier: "Root")
      
      func root(_: Void = ()) -> RootViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: root)
      }
      
      static func validate() throws {
        if _R.storyboard.main().root() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'root' could not be loaded from storyboard 'Main' as 'RootViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct meetingRoomsListStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let meetingRoomBase = StoryboardViewControllerResource<MeetingRoomsListViewController>(identifier: "MeetingRoomBase")
      let name = "MeetingRoomsListStoryboard"
      
      func meetingRoomBase(_: Void = ()) -> MeetingRoomsListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: meetingRoomBase)
      }
      
      static func validate() throws {
        if _R.storyboard.meetingRoomsListStoryboard().meetingRoomBase() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'meetingRoomBase' could not be loaded from storyboard 'MeetingRoomsListStoryboard' as 'MeetingRoomsListViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct settingsStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "SettingsStoryboard"
      let settingsBase = StoryboardViewControllerResource<SettingsViewController>(identifier: "SettingsBase")
      
      func settingsBase(_: Void = ()) -> SettingsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsBase)
      }
      
      static func validate() throws {
        if _R.storyboard.settingsStoryboard().settingsBase() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsBase' could not be loaded from storyboard 'SettingsStoryboard' as 'SettingsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}